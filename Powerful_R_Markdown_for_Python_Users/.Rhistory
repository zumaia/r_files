revel0 = fifaNet$Work_Rate=="Medium / Medium"
modelo_glm_work <- glm(internacional ~ portero + Rating + Age + revel0,
data = fifaNet, family = "binomial")
summary(modelo_glm_work)
cat ('El Odd Ratio de porteroSI es:', exp(modelo_glm_work$coefficients[2]), '\n')
cat ('El Odd Ratio de Rating es:', exp(modelo_glm_work$coefficients[3]), '\n')
cat ('El Odd Ratio de Age es:', exp(modelo_glm_work$coefficients[4]), '\n')
cat ('El Odd Ratio de Work_RateMedium / Medium  es:', exp(modelo_glm_work$coefficients[5]), '\n')
nuevos_datos <- data.frame(portero='Si',
Rating=95,
Age=25,
Work_Rate="High / High")
nuevos_datos
prob_nuevo <- predict(modelo_glm, nuevos_datos, type="response")
glm.pred_nuevo <- ifelse(prob_nuevo > 0.5, "Internacional", "No internacional")
glm.pred_nuevo
# Cortamos el rango y lo asignamos
fifaNet$Age_Int <- cut(fifaNet$Age,
breaks = c(0,20,27,Inf),
labels = c("Junior", "Middle","Senior"))
ggplot(fifaNet, aes(x = Rating, fill = Age_Int)) +
geom_histogram(binwidth=.5, position="dodge")
# Density plots
ggplot(fifaNet, aes(x=Rating, colour=Age_Int)) + geom_density()
# fm = aov( lm(fifaNet$Rating ~ fifaNet$Age_Int) )
fifa_anova <- aov(Rating ~ Age_Int, data=fifaNet)
summary(fifa_anova)
names(fifa_anova)
fm = aov( lm(fifaNet$Rating ~ fifaNet$Age_Int) )
fifa_anova <- aov(Rating ~ Age_Int, data=fifaNet)
summary(fm)
summary(fifa_anova)
plot(fm)
plot(fifa_anova)
par(mfrow=c(2,2))
plot(fifa_anova)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(fm)
par(mfrow=c(1,1))
plot(fm$fitted.values,fm$residuals)
boxplot(fm$residuals~fifaNet$Age_Int, col = c("yellow", "blue", "green"))
desviaciones <- tapply(fm$residuals, fifaNet$Age_Int, sd)
max(desviaciones) / min(desviaciones)
fm +
theme_classic2() +
labs(title = "Crop yield in response to fertilizer mix and planting density",
x = "Planting density (1=low density, 2=high density)",
y = "Yield (bushels per acre)")
knitr::opts_chunk$set(echo = TRUE)
# Limpiamos el workspace, por si hubiera algun dataset o informacion cargada
rm(list = ls())
# Limpiamos la consola
cat("\014")
# Cambiar el directorio de trabajo
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
packages <- c("DT","magrittr", "funModeling", "tidyr", "dplyr", "purrr", "ggplot2",
"gridExtra", "skimr", "nortest", "car", "corrplot", "GGally",
"psych")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
fifa = read.csv("Fifa.csv")
head(fifa)
nums <- sapply(fifa, is.numeric)  # seleccionamos las numéricas
numericas <- names(fifa)[nums]    # obtenermos los nombres de las columnas
numericas
cats <- sapply(fifa, is.character)  # seleccionamos las categoricas
categoricas <- names(fifa)[cats] # obtenermos los nombres de las columnas
categoricas
head(fifa$Weight)
fifa$Weight <- gsub(' kg', '', fifa$Weight)%>%
as.numeric()
head(fifa$Weight)
head(fifa$Height)
fifa$Height <- gsub(' cm', '', fifa$Height)%>%
as.numeric()
head(fifa$Height)
cat('Rating')
head(fifa$Rating)
# Cortamos el rango y lo asignaos a cata clasificación
fifa$Clasificacion <- cut(fifa$Rating,
breaks = c(0,40,50,70,80,90,100),
labels = c("Muy Malo", "Malo",
"Regular", "Bueno","Muy Bueno","Excelente"))
cat('Clasificación')
head(fifa$Clasificacion)
plot(fifa$Clasificacion)
str(fifa)
vbles_categoricas <- fifa %>%
select(categoricas)
summary(vbles_categoricas)
skim(vbles_categoricas)
df_status(vbles_categoricas)
vbles_numericas <- fifa %>%
select(numericas)
summary(vbles_numericas)
skim(vbles_numericas)
df_status(vbles_numericas)
length(unique(fifa$Club))
length(unique(fifa$Nationality))
# Genero el nuevo dataframe
fifaNet <- fifa
# Convierto los valores na en 0
fifaNet$National_Kit[is.na(fifaNet$National_Kit)] <- 0
# Convierto los valores vacios en NO
fifaNet$National_Position[fifaNet$National_Position==""]<-'No'
cat('Mostramos si hay na: \n')
colSums(is.na(fifaNet))
cat('Mostramos si hay null: \n')
is_null(fifaNet)
fifaNet <- fifaNet %>%
drop_na()
fifaNet %>% summarise(across(.fns = ~sum(.=='',na.rm=TRUE) ,.names = "Zeros_in_{.col}"))
fifaNet$portero <- ifelse(fifaNet$Club_Position == 'GK', "Si", "No")
boxplot(fifaNet$Weight~fifaNet$portero, col="orange")
boxplot(fifaNet$Weight~fifaNet$Preffered_Foot, col="red")
boxplot(fifaNet$Weight~fifaNet$Clasificacion, col="blue")
boxplot(fifaNet$Weight~fifaNet$Age, col="green")
par(mfrow=c(2,2))
boxplot(fifaNet$Weight~fifaNet$portero, col="orange")
boxplot(fifaNet$Weight~fifaNet$Preffered_Foot, col="red")
boxplot(fifaNet$Weight~fifaNet$Clasificacion, col="blue")
boxplot(fifaNet$Weight~fifaNet$Age, col="green")
fifaNet %>%
ggplot(aes(Contract_Expiry)) +
ggtitle("\n Histograma") +
theme(plot.title = element_text(hjust = 0.5),
legend.position="none") +
geom_bar(stat='count', position = 'stack')
meds <- prop.table(table(fifa$Contract_Expiry)) * 100
bp <- barplot(meds, beside=TRUE, axes=FALSE, xlab="Año finalización",
col=c("orange"), ylab="Frequency (%)", ylim=c(0,30))
axis(2, at=seq(0,100,10))
legend("topright", legend=c("Porcentaje"), bty="n", fill=c("orange"))
text(bp, 0, round(meds, 1), cex=1, pos=3)
qqnorm(fifaNet$Weight)
qqline(fifaNet$Weight)
# Representamos los datos mediante un histograma y
# superponer la curva de una distribución normal con la
ggplot(data = fifaNet, aes(x = Weight)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(fifaNet$Weight),
sd = sd(fifaNet$Weight))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
plot(density(fifaNet$Weight), lwd=3, col='deeppink')
qqPlot(fifaNet$Weight, pch=20, ylab='Weight (Peso)',
main='QQplot para peso en unidades')
# Nivel de confianza 95%
# Calculo el margen de error
# z�/2 , el cuantil de la distribución normal estándar que arrastra una
# probabilidad de �/2, con � nivel de significancia establecido
# Para un nivel de confianza el 95%
# α = 0.05  y α/2 = 0,025
# El cuantil de la distribución normal es de
x <-abs(qnorm(0.025,0,1))
x
# Media
media <- function(x) {sum(x)/length(x)}
media_a = media(fifaNet$Weight)
cat("Media de Weight:", media_a, sep="\n")
filas=dim(fifaNet)[1]
cat(sep="\n","Tamaño muestra", filas)
stand_desv <- function(x) sqrt(sum((x-mean(x))^2/(length(x)-1)))
desv_a <- stand_desv(fifaNet$Weight)
cat(sep="\n","Desviación Standar", desv_a)
conf <- 0.95
cat("Nivel de confianza", conf)
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim.inf <- media_a - margen.error # Límite inferior del intervalo
cat("Limite inferior: ", lim.inf, sep="\n")
lim.sup <- media_a + margen.error # Límite superior del intervalo
cat(sep="\n", "Limite superior: ", lim.sup)
cat(sep="\n", "Con una confianza del 95% podemos decir que la media poblacional
estará entre los valores : ", lim.inf, lim.sup)
t.test(fifaNet$Weight)
cat("Se tiene el 95% de confianza de que el intervalo [75.15114, 75.35503]
contenga el valor medio de la variable Sales")
lim_inf <- function(xxxx) {
x <-abs(qnorm(0.025,0,1))
media_a = sapply(xxxx, mean)
desv_a <- sapply(xxxx, sd)
conf <- 0.95
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim_i <- media_a - margen.error
return(lim_i)
}
lim_sup <- function(xxxx) {
x <-abs(qnorm(0.025,0,1))
media_a = sapply(xxxx, mean)
desv_a <- sapply(xxxx, sd)
conf <- 0.95
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim_s <- media_a + margen.error
return(lim_s)
}
jugador_campo <- fifaNet %>%
filter(portero == "No")%>%
select(Weight)
jugador_portero <- fifaNet %>%
filter(portero == "Si") %>%
select(Weight)
cat("Limite inferior jugador_campo: ", lim_inf(jugador_campo) , sep="\n")
cat("Limite superior jugador_campo: ", lim_sup(jugador_campo) , sep="\n")
cat("Limite inferior jugador_portero: ", lim_inf(jugador_portero) , sep="\n")
cat("Limite superior jugador_portero: ", lim_sup(jugador_portero) , sep="\n")
t.test(jugador_campo)
t.test(jugador_portero)
var.test( fifaNet$portero[fifaNet$portero=="Si"], fifaNet$portero[fifaNet$portero=="No"] )
View(fifaNet)
knitr::opts_chunk$set(echo = TRUE)
# Limpiamos el workspace, por si hubiera algun dataset o informacion cargada
rm(list = ls())
# Limpiamos la consola
cat("\014")
# Cambiar el directorio de trabajo
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
packages <- c("DT","magrittr", "funModeling", "tidyr", "dplyr", "purrr", "ggplot2",
"gridExtra", "skimr", "nortest", "car", "corrplot", "GGally",
"psych")
new <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new)) install.packages(new)
a=lapply(packages, require, character.only=TRUE)
fifa = read.csv("Fifa.csv")
head(fifa)
nums <- sapply(fifa, is.numeric)  # seleccionamos las numéricas
numericas <- names(fifa)[nums]    # obtenermos los nombres de las columnas
numericas
cats <- sapply(fifa, is.character)  # seleccionamos las categoricas
categoricas <- names(fifa)[cats] # obtenermos los nombres de las columnas
categoricas
head(fifa$Weight)
fifa$Weight <- gsub(' kg', '', fifa$Weight)%>%
as.numeric()
head(fifa$Weight)
head(fifa$Height)
fifa$Height <- gsub(' cm', '', fifa$Height)%>%
as.numeric()
head(fifa$Height)
cat('Rating')
head(fifa$Rating)
# Cortamos el rango y lo asignaos a cata clasificación
fifa$Clasificacion <- cut(fifa$Rating,
breaks = c(0,40,50,70,80,90,100),
labels = c("Muy Malo", "Malo",
"Regular", "Bueno","Muy Bueno","Excelente"))
cat('Clasificación')
head(fifa$Clasificacion)
plot(fifa$Clasificacion)
str(fifa)
vbles_categoricas <- fifa %>%
select(categoricas)
summary(vbles_categoricas)
skim(vbles_categoricas)
df_status(vbles_categoricas)
vbles_numericas <- fifa %>%
select(numericas)
summary(vbles_numericas)
skim(vbles_numericas)
df_status(vbles_numericas)
length(unique(fifa$Club))
length(unique(fifa$Nationality))
# Genero el nuevo dataframe
fifaNet <- fifa
# Convierto los valores na en 0
fifaNet$National_Kit[is.na(fifaNet$National_Kit)] <- 0
# Convierto los valores vacios en NO
fifaNet$National_Position[fifaNet$National_Position==""]<-'No'
cat('Mostramos si hay na: \n')
colSums(is.na(fifaNet))
cat('Mostramos si hay null: \n')
is_null(fifaNet)
fifaNet <- fifaNet %>%
drop_na()
fifaNet %>% summarise(across(.fns = ~sum(.=='',na.rm=TRUE) ,.names = "Zeros_in_{.col}"))
fifaNet$portero <- ifelse(fifaNet$Club_Position == 'GK', "Si", "No")
boxplot(fifaNet$Weight~fifaNet$portero, col="orange")
boxplot(fifaNet$Weight~fifaNet$Preffered_Foot, col="red")
boxplot(fifaNet$Weight~fifaNet$Clasificacion, col="blue")
boxplot(fifaNet$Weight~fifaNet$Age, col="green")
par(mfrow=c(2,2))
boxplot(fifaNet$Weight~fifaNet$portero, col="orange")
boxplot(fifaNet$Weight~fifaNet$Preffered_Foot, col="red")
boxplot(fifaNet$Weight~fifaNet$Clasificacion, col="blue")
boxplot(fifaNet$Weight~fifaNet$Age, col="green")
fifaNet %>%
ggplot(aes(Contract_Expiry)) +
ggtitle("\n Histograma") +
theme(plot.title = element_text(hjust = 0.5),
legend.position="none") +
geom_bar(stat='count', position = 'stack')
meds <- prop.table(table(fifa$Contract_Expiry)) * 100
bp <- barplot(meds, beside=TRUE, axes=FALSE, xlab="Año finalización",
col=c("orange"), ylab="Frequency (%)", ylim=c(0,30))
axis(2, at=seq(0,100,10))
legend("topright", legend=c("Porcentaje"), bty="n", fill=c("orange"))
text(bp, 0, round(meds, 1), cex=1, pos=3)
qqnorm(fifaNet$Weight)
qqline(fifaNet$Weight)
# Representamos los datos mediante un histograma y
# superponer la curva de una distribución normal con la
ggplot(data = fifaNet, aes(x = Weight)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(fifaNet$Weight),
sd = sd(fifaNet$Weight))) +
ggtitle("Histograma + curva normal teórica") +
theme_bw()
plot(density(fifaNet$Weight), lwd=3, col='deeppink')
qqPlot(fifaNet$Weight, pch=20, ylab='Weight (Peso)',
main='QQplot para peso en unidades')
# Nivel de confianza 95%
# Calculo el margen de error
# z�/2 , el cuantil de la distribución normal estándar que arrastra una
# probabilidad de �/2, con � nivel de significancia establecido
# Para un nivel de confianza el 95%
# α = 0.05  y α/2 = 0,025
# El cuantil de la distribución normal es de
x <-abs(qnorm(0.025,0,1))
x
# Media
media <- function(x) {sum(x)/length(x)}
media_a = media(fifaNet$Weight)
cat("Media de Weight:", media_a, sep="\n")
filas=dim(fifaNet)[1]
cat(sep="\n","Tamaño muestra", filas)
stand_desv <- function(x) sqrt(sum((x-mean(x))^2/(length(x)-1)))
desv_a <- stand_desv(fifaNet$Weight)
cat(sep="\n","Desviación Standar", desv_a)
conf <- 0.95
cat("Nivel de confianza", conf)
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim.inf <- media_a - margen.error # Límite inferior del intervalo
cat("Limite inferior: ", lim.inf, sep="\n")
lim.sup <- media_a + margen.error # Límite superior del intervalo
cat(sep="\n", "Limite superior: ", lim.sup)
cat(sep="\n", "Con una confianza del 95% podemos decir que la media poblacional
estará entre los valores : ", lim.inf, lim.sup)
t.test(fifaNet$Weight)
cat("Se tiene el 95% de confianza de que el intervalo [75.15114, 75.35503]
contenga el valor medio de la variable Sales")
lim_inf <- function(xxxx) {
x <-abs(qnorm(0.025,0,1))
media_a = sapply(xxxx, mean)
desv_a <- sapply(xxxx, sd)
conf <- 0.95
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim_i <- media_a - margen.error
return(lim_i)
}
lim_sup <- function(xxxx) {
x <-abs(qnorm(0.025,0,1))
media_a = sapply(xxxx, mean)
desv_a <- sapply(xxxx, sd)
conf <- 0.95
error.est <- desv_a/sqrt(filas) # Calculamos el error estándar
margen.error <- x * error.est # nivel de confianza de 95%
lim_s <- media_a + margen.error
return(lim_s)
}
jugador_campo <- fifaNet %>%
filter(portero == "No")%>%
select(Weight)
jugador_portero <- fifaNet %>%
filter(portero == "Si") %>%
select(Weight)
cat("Limite inferior jugador_campo: ", lim_inf(jugador_campo) , sep="\n")
cat("Limite superior jugador_campo: ", lim_sup(jugador_campo) , sep="\n")
cat("Limite inferior jugador_portero: ", lim_inf(jugador_portero) , sep="\n")
cat("Limite superior jugador_portero: ", lim_sup(jugador_portero) , sep="\n")
t.test(jugador_campo)
t.test(jugador_portero)
var.test( fifaNet$portero[fifaNet$portero=="Si"], fifaNet$portero[fifaNet$portero=="No"] )
var.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] )
var.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] )
var.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] )
var.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] )
t.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] )
t.test( fifaNet$portero[fifaNet$portero=="No"], fifaNet$portero[fifaNet$portero=="Si"] ,
equalvar = TRUE, alternative = "bilateral")
t.test(fifaNet$Height,  mu=7, alternative="greater")
qqPlot(fifaNet$Height)
shapiro.test(fifaNet$Height)
t.test(fifaNet$Height,  mu=5, alternative="greater")
unlink('~/Documentos/MASTER UOC/Fundamentos de la ciencia de datos aula 2/PEC3/PEC3_Oscar_Rojo_Martin_cache', recursive = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
setwd("~/Documentos/MASTER UOC/CURSADOS/Mineria de datos/PRACTICA2")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
setwd("~/Documentos/MASTER UOC/CURSADOS/Mineria de datos/PRACTICA2")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
raw_data <- read.csv("recipeData.csv")
top_data <- read.csv("../PRACTICA/data/top_data.csv")
top_data <- dplyr::select(top_data, -BrewMethod, -FG, -SugarScale, -OG, - Estilo)
top_data$Clase <- as.factor(top_data$Clase)
top_data <- as.data.frame(top_data)
#indicamos el directorio de trabajo
setwd("~/Documentos/MASTER UOC/Mineria de datos/PRACTICA")
#indicamos el directorio de trabajo
setwd("~/Documentos/MASTER UOC/Mineria de datos/PRACTICA")
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library('nloptr')
hn <- function(x, n)
{
hret <- 0
if (n == 0)
{
hret <- x + 2*x
}
else
{
hret <- x - 2*x
}
return (hret)
}
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
use_condaenv("r-reticulate")
library('nloptr')
hn <- function(x, n)
{
hret <- 0
if (n == 0)
{
hret <- x + 2*x
}
else
{
hret <- x - 2*x
}
return (hret)
}
reticulate::repl_python()
reticulate::repl_python()
library(reticulate)
use_condaenv("r-reticulate")
py_install("pandas", pip = TRUE)
py_module_available("pandas")
reticulate::repl_python()
library(reticulate)
use_condaenv("r-reticulate")
py_install("seaborn", pip = TRUE)
py_module_available("seaborn")
reticulate::repl_python()
library(reticulate)
use_condaenv("r-reticulate")
#py_install("pandas", pip = TRUE)
py_module_available("pandas")
#py_install("seaborn", pip = TRUE)
py_module_available("seaborn")
library('nloptr')
hn <- function(x, n)
{
hret <- 0
if (n == 0)
{
hret <- x + 2*x
}
else
{
hret <- x - 2*x
}
return (hret)
}
reticulate::repl_python()

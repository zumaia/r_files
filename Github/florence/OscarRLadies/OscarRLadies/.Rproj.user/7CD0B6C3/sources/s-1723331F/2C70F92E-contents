---
title: 'Florence -200 aniversario Github R-Ladies'
author: "Autor: Oscar Rojo Martín"
date: "Mayo 2020"
output:
  html_document:
    highlight: default
    number_sections: yes
    theme: cosmo
    toc: yes
    toc_depth: 2
    includes:
      in_header: header.html
  pdf_document:
    highlight: zenburn
    toc: yes
  word_document: default
---


# .- Introducción

https://www.business-science.io/learn-r/2020/04/20/setup-python-in-r-with-rmarkdown.html

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE
)
```

CONCURSO DE ANÁLISIS DE DATOS CON MOTIVO DE LOS 200 AÑOS DEL NACIMIENTO DE FLORENCE NIGHTINGALE

Con el objetivo de conmemorar los 200 años del nacimiento de Florence Nightingale, precursora de la estadística y epidemiología moderna, y primera mujer admitida en la Royal Statistical Society, el colectivo de Rladies España (nodos de Barcelona, Madrid y Bilbao) en colaboración con la Sociedad Española de Biometría y la Sociedad Catalana de Estadística se complace en anunciar el concurso: “200 AÑOS DE FLORENCE NIGHTINGALE”.

El objetivo del concurso consiste en analizar el conjunto de datos que Florence Nightingale utilizó para analizar las causas de mortalidad del ejército británico durante la guerra de Crimea y que sirvió para determinar los factores asociados a la alta mortalidad y reducirla significativamente.

https://github.com/rladies/spain_nightingale/blob/master/README.md

https://github.com/rladies/spain_nightingale/blob/master/datos_florence.xlsx



# .- Limpieza y preparación entorno trabajo
```{r Limpieza y preparación}
# Limpiamos el entorno de Trabajo
rm(list=ls())

# Limpiamos la consola
cat("\014")

# Comprobamos que está bien establecido el directorio
getwd()
dir()
```
```{r Directorio de trabajo}
#indicamos el directorio de trabajo
setwd("~/Documentos/R/Github/florence")
```


## .- Carga de librerias
```{r Carga librerias}
# Importamos las librerias a utilizar

packages <- c( "reshape2","rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]

if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
```



```{r pressure, echo=FALSE}
raw <- rio::import("https://github.com/rladies/spain_nightingale/raw/master/datos_florence.xlsx")
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r}
cat("\nCabecera y primesas líneas: \n")
head(raw)
cat("\nNombre de  las columnas: v")
names(raw)
cat("\nClase: \n")
class(raw)
cat("\nDimensión: \n")
dim(raw)
```
```{r}
names(raw) <- c("mes-año", "tamaño","Muertes x Zymotic", "Muertes x Heridas/Lesiones", "Otras Causas", "Tasa anual x1000 Zymotic", "Tasa anual x1000 Heridas/Lesiones","Tasa anual x1000 otras")
d <- raw[c(-1,-2,-3),]
d$`mes-año`[d$`mes-año`=="Aug_1855"]="Aug 1855"
as.Date(d$`mes-año`, "%m %Y")
```
```{r}
# simplificamos nombres
names(d)<- c("fecha", "tamaño","zymotic", "heridas", "otras", "zymotic1000año", "heridas1000año","otras1000año")
str(d)
```
```{r}
# Convertimos en numeric
atr <- c("tamaño","zymotic", "heridas", "otras", "zymotic1000año", "heridas1000año","otras1000año")
for (i in atr){
  d[,i]<- as.numeric(d[,i])
}
# Redondeamos los últimos números
cols <- names(d[6:8])
for (i in cols){
  d[,i] <- round(d[,i], digits = 2)
}
glimpse(d)
```
## .-ETL
```{r}
# convierto la muertes mensuales por 1000
col <- names(d[3:5])
for (i in col){
  d[,i]<- d[,i]/d$tamaño*1000
  d[,i]
}
```
```{r}
df <- dplyr::select(d, -tamaño)
names(df) <- c("fecha","zymotic", "heridas", "otras", "zymoticAÑO", "heridasAÑO","otrasAÑO")
```
```{r}
df$fecha <- gsub("_", " ", df$fecha, fixed = TRUE)
```



```{r}
# Separar fecha
df <- df %>%
  tidyr::separate(fecha, c("mes", "año"), sep = " ")
```




## .-Resumen de datos
```{r}
summary(df)
```
```{r}
skimr::skim(df)
```
## .-Boxplot
```{r}
boxplot(df[3:8])
```
```{r}
#library(epiDisplay)
epiDisplay::codebook(df)
```
```{r}
epiDisplay::summ(df)
visdat::vis_dat(df)
```


## .-Matrices
```{r}
#library(psych)
pairs.panels(df, pch=21,main="Matriz de Dispersión, Histograma y Correlación")
```
```{r Scatterplot de Variables}
textscatter <- function(df, mapping, ...) {
   ggplot(df, mapping, ...) + geom_text()
}

ggpairs(
  df, 
  title="Scatterplot de Variables",
  columns = c(3:8),
  mapping=ggplot2::aes(colour = año))
  lower = list(continuous = textscatter)

```

# .- Time-Series
```{r}
pas1.ts <- ts(df["zymotic"], start = c(1854, 6), frequency = 12)
str(pas1.ts)
```
```{r}
pas1.ts
```
```{r}
pas2.ts <- ts(df[c(4)], start = c(1854, 6), frequency = 12)
pas3.ts <- ts(df[c(5)], start = c(1854, 6), frequency = 12)
pas4.ts <- ts(df[c(6)], start = c(1854, 6), frequency = 12)
pas5.ts <- ts(df[c(7)], start = c(1854, 6), frequency = 12)
pas6.ts <- ts(df[c(8)], start = c(1854, 6), frequency = 12)
```

```{r}
pass.ts <- ts(df[c(3:8)], start = c(1854, 6), frequency = 12)
str(pass.ts)
```
```{r}
pass.ts
```
```{r}
#library(ggfortify)
#library(zoo)
autoplot(pass.ts)
plot(pass.ts)
```
```{r}
autoplot(pas1.ts, ts.colour = "red", ts.linetype = "dashed")
```
```{r}
# autoplot(stl(pas1.ts, s.window = "periodic"), ts.colour="blue")
```
```{r}
autoplot(pacf(pas1.ts, plot = FALSE))
```
```{r}
autoplot(acf(pas1.ts, plot = FALSE), conf.int.fill = "#0000FF", conf.int.value = 0.8,
         conf.int.type = "ma")
```
```{r}
autoplot(spec.ar(pas1.ts, plot = FALSE))
autoplot(spec.ar(pas2.ts, plot = FALSE))
```

Periodograma acumulado
```{r}


ggcpgram(arima.sim(list(ar = c(0.7, -0.5)), n = 50))
```
ggtsdiag debería generar el diagrama similar a tsdiag.

```{r}
#library(forecast)
ggtsdiag(auto.arima(pas1.ts))
```
```{r}
gglagplot(pas1.ts, lags = 4)
```
```{r}
ggfreqplot(pas1.ts)
```
```{r}
ggfreqplot(pas1.ts, freq = 4)
```
```{r}
arima1<-forecast::auto.arima(pas1.ts)
forecast1<-forecast::forecast(arima1,level = c(95), h = 50)
autoplot(forecast1)
```
```{r}
autoplot(forecast1, ts.colour = "firebrick1", predict.colour = "red",
         predict.linetype = "dashed", conf.int = FALSE)
```
## Season plots

```{r}
forecast::ggseasonplot(pas1.ts, year.labels=TRUE, year.labels.left=TRUE)
forecast::ggseasonplot(pas1.ts, year.labels=TRUE, year.labels.left=TRUE, polar = TRUE)
```




## Ruido Gaussiano linealmente dependiente en el tiempo

```{r}
alpha <- 1
beta <- 0.1
t <- 1:22
mu <- alpha + beta*t

fit <- lm(pas1.ts ~ t)     #calcula la regresión  lm=modelo lineal
summary(fit)    #slow y el interceptro   y=ax+b

```

```{r}
plot(fit)
```

```{r}
dplyr::tibble(time = t, value = pas1.ts) %>%
  ggplot2::ggplot(ggplot2::aes(x = time, y = value)) +
  ggplot2::geom_line() +
  ggplot2::geom_abline(intercept = fit$coefficients[1], slope = fit$coefficients[2], col = "red")   #quiero calcular la lina roja con una regresión
```

```{r}
# SOI= LA SERIE TEMPORAL
# REC= CANTIDAD DE PECES QUE SE HAN PESCADO
soi.lag6 <- xts::lag.xts(pas1.ts,6)  # desplazar una serie temporal 6 veces, con lo que x1 es igual a y7, x2 igual a y8, x3 igual a y9....
fit <- lm(pas2.ts ~ soi.lag6)    # esta es la relación que hace
summary(fit)
```

```{r}
dplyr::tibble(time = zoo::index(pas2.ts), 
              actual = zoo::coredata(pas2.ts),
              estimated = c(rep(0,6),fit$fitted.values)) %>%
  tidyr::gather(pas1.ts, Value, -time) %>%
  ggplot2::ggplot(ggplot2::aes(x = time, y = Value, col = pas1.ts)) +
  ggplot2::geom_line()
```
```{r}
plot(fit)
```
```{r}
# library(reshape2)
meltdf <- reshape2::melt(d,id="fecha")
ggplot(meltdf,aes(x=fecha,y=value,colour=variable,group=variable)) + geom_line()
```

## tslm rewritten
```{r}
# autoplot of a forecast object
fc <- forecast::forecast(pas1.ts)
autoplot(fc)
```
```{r}
# autoplot of a forecast object
fc <- forecast::forecast(pass.ts)
autoplot(fc)
```
```{r}
# Plotting the components of an ETS model
fit <- forecast::ets(pas1.ts)
autoplot(fit)
```
```{r}
# Plotting the inverse characteristic roots of an ARIMA model
fit <- forecast::auto.arima(pas1.ts, D=1)
autoplot(fit)
```
```{r}
ggtsdisplay(pas1.ts)
```
```{r}
ggseasonplot(pas1.ts)
```
```{r}
deaths.lm  <- tslm(pas1.ts ~ trend + fourier(pas1.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas1.ts,3,36)))
autoplot(mdeaths.fcast)
deaths.lm  <- tslm(pas2.ts ~ trend + fourier(pas2.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas2.ts,3,36)))
autoplot(mdeaths.fcast)
deaths.lm  <- tslm(pas3.ts ~ trend + fourier(pas3.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas3.ts,3,36)))
autoplot(mdeaths.fcast)
deaths.lm  <- tslm(pas4.ts ~ trend + fourier(pas4.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas4.ts,3,36)))
autoplot(mdeaths.fcast)
deaths.lm  <- tslm(pas5.ts ~ trend + fourier(pas5.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas5.ts,3,36)))
autoplot(mdeaths.fcast)
deaths.lm  <- tslm(pas6.ts ~ trend + fourier(pas6.ts,3))
mdeaths.fcast <- forecast(deaths.lm,
    data.frame(fourier(pas6.ts,3,36)))
autoplot(mdeaths.fcast)
```

```{r}
# left
autoplot(pass.ts)

# right
autoplot(pass.ts, facets = TRUE)
```
```{r}
autoplot(pass.ts, facets = TRUE) +
  geom_smooth() +
  labs("Muertes y tasa",
       y = "Value(in thousands)",
       x = NULL)
```
```{r}
ggseasonplot(pas1.ts, year.labels=FALSE, continuous=TRUE)
```


```{r}

ggseasonplot(pas1.ts, year.labels=FALSE, continuous=TRUE, polar = TRUE)
```
```{r}
# left: autoplot of the beer data
autoplot(pas1.ts)

# middle: lag plot of the beer data
gglagplot(pas1.ts)

# right: ACF plot of the beer data
ggAcf(pas1.ts)
```
```{r}
#library(tidyquant)
df %>%
    ggplot(aes(x = mes, y = zymotic, group = año)) +
    geom_area(aes(fill = año), position = "stack") +
    labs(title = "Quantity Sold: Month Plot", x = "", y = "Sales",
         subtitle = "March through July tend to be most active") +
    scale_y_continuous() +
    theme_tq()
```



```{r}

dygraph(pass.ts, main = "New Haven Temperatures") %>%
  dyRangeSelector()
```



```{r}
dygraph(pass.ts, main="Muertes") %>%
  dySeries(label="valor por mil", color="black") %>%
  dyShading(from="1800-1-1", to="1855-1-1", color="#FFE6E6") %>%
  dyShading(from="1856-1-1", to="2000-1-1", color="#CCEBD6")
```
# Graficos 
```{r}
p <- ggplot(d, aes(x = zymotic, y=heridas, size = tamaño)) +
  geom_point(show.legend = FALSE, alpha = 0.7) +
  scale_color_viridis_d() +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  labs(x = "zymotic", y = "heridas100año")
p



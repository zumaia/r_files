knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
#indicamos el directorio de trabajo
setwd("~/Documentos/R/Github/florence")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr","psych", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
install.packages("rio")
install.packages("rio")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr","psych", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
install.packages("readODS")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr","psych", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
install.packages("psych")
install.packages("mnormt")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
install.packages("tidyquant")
install.packages("tidyquant")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
install.packages("psych")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
#indicamos el directorio de trabajo
setwd("~/Documentos/R/Github/florence")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
nstall.packages("mnormt",repo="http://cran.r-project.org",dep=TRUE)
install.packages("mnormt",repo="http://cran.r-project.org",dep=TRUE)
remove.packages("mnormt")
.libPaths(.libPaths()[2])
remove.packages("mnormt")
install.packages("psych")
install.packages("psych")
install.packages("psych")
install.packages("~/Descargas/mnormt_2.0.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Descargas/mnormt_2.0.0(1).tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
#indicamos el directorio de trabajo
setwd("~/Documentos/R/Github/florence")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
versionInfo()
RStudio.Version()
r.Versi()
r.Version()
R.version
update.packages(ask = FALSE)
R.version
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
install.packages("knitr", lib="/usr/local/lib/R/site-library")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
#indicamos el directorio de trabajo
setwd("~/Documentos/R/Github/florence")
# Importamos las librerias a utilizar
packages <- c( "rio","csvy", "feather", "fst", "hexView", "readODS", "rmatio", "magrittr","dplyr", "ggfortify", "zoo","GGally","ggplot2","forecast","tidyquant","dygraphs","psych")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
raw <- rio::import("https://github.com/rladies/spain_nightingale/raw/master/datos_florence.xlsx")
cat("\nCabecera y primesas líneas: \n")
head(raw)
cat("\nNombre de  las columnas: v")
names(raw)
cat("\nClase: \n")
class(raw)
cat("\nDimensión: \n")
dim(raw)
names(raw) <- c("mes-año", "tamaño","Muertes x Zymotic", "Muertes x Heridas/Lesiones", "Otras Causas", "Tasa anual x1000 Zymotic", "Tasa anual x1000 Heridas/Lesiones","Tasa anual x1000 otras")
d <- raw[c(-1,-2,-3),]
d$`mes-año`[d$`mes-año`=="Aug_1855"]="Aug 1855"
as.Date(d$`mes-año`, "%m %Y")
# simplificamos nombres
names(d)<- c("fecha", "tamaño","zymotic", "heridas", "otras", "zymotic1000año", "heridas1000año","otras1000año")
str(d)
# Convertimos en numeric
atr <- c("tamaño","zymotic", "heridas", "otras", "zymotic1000año", "heridas1000año","otras1000año")
for (i in atr){
d[,i]<- as.numeric(d[,i])
}
# Redondeamos los últimos números
cols <- names(d[6:8])
for (i in cols){
d[,i] <- round(d[,i], digits = 2)
}
glimpse(d)
# convierto la muertes mensuales por 1000
col <- names(d[3:5])
for (i in col){
d[,i]<- d[,i]/d$tamaño*1000
d[,i]
}
df <- dplyr::select(d, -tamaño)
names(df) <- c("fecha","zymotic", "heridas", "otras", "zymoticAÑO", "heridasAÑO","otrasAÑO")
df$fecha <- gsub("_", " ", df$fecha, fixed = TRUE)
# Separar fecha
df <- df %>%
tidyr::separate(fecha, c("mes", "año"), sep = " ")
summary(df)
skimr::skim(df)
boxplot(df[3:8])
#library(epiDisplay)
epiDisplay::codebook(df)
epiDisplay::summ(df)
visdat::vis_dat(df)
#library(psych)
pairs.panels(df, pch=21,main="Matriz de Dispersión, Histograma y Correlación")
textscatter <- function(df, mapping, ...) {
ggplot(df, mapping, ...) + geom_text()
}
ggpairs(
df,
title="Scatterplot de Variables",
columns = c(3:8),
mapping=ggplot2::aes(colour = año))
lower = list(continuous = textscatter)
pas1.ts <- ts(df["zymotic"], start = c(1854, 6), frequency = 12)
str(pas1.ts)
pas1.ts
pas2.ts <- ts(df[c(4)], start = c(1854, 6), frequency = 12)
pas3.ts <- ts(df[c(5)], start = c(1854, 6), frequency = 12)
pas4.ts <- ts(df[c(6)], start = c(1854, 6), frequency = 12)
pas5.ts <- ts(df[c(7)], start = c(1854, 6), frequency = 12)
pas6.ts <- ts(df[c(8)], start = c(1854, 6), frequency = 12)
pass.ts <- ts(df[c(3:8)], start = c(1854, 6), frequency = 12)
str(pass.ts)
pass.ts
#library(ggfortify)
#library(zoo)
autoplot(pass.ts)
plot(pass.ts)
autoplot(pas1.ts, ts.colour = "red", ts.linetype = "dashed")
# autoplot(stl(pas1.ts, s.window = "periodic"), ts.colour="blue")
autoplot(pacf(pas1.ts, plot = FALSE))
autoplot(acf(pas1.ts, plot = FALSE), conf.int.fill = "#0000FF", conf.int.value = 0.8,
conf.int.type = "ma")
autoplot(spec.ar(pas1.ts, plot = FALSE))
autoplot(spec.ar(pas2.ts, plot = FALSE))
ggcpgram(arima.sim(list(ar = c(0.7, -0.5)), n = 50))
#library(forecast)
ggtsdiag(auto.arima(pas1.ts))
gglagplot(pas1.ts, lags = 4)
ggfreqplot(pas1.ts)
ggfreqplot(pas1.ts, freq = 4)
arima1<-forecast::auto.arima(pas1.ts)
forecast1<-forecast::forecast(arima1,level = c(95), h = 50)
autoplot(forecast1)
autoplot(forecast1, ts.colour = "firebrick1", predict.colour = "red",
predict.linetype = "dashed", conf.int = FALSE)
forecast::ggseasonplot(pas1.ts, year.labels=TRUE, year.labels.left=TRUE)
forecast::ggseasonplot(pas1.ts, year.labels=TRUE, year.labels.left=TRUE, polar = TRUE)
djia.return <- xts::diff.xts(log(df$zymotic))  #diff:calcula la diferencia entre el valor actual y el valor anterior
plot(djia.return)
alpha <- 1
beta <- 0.1
t <- 1:22
mu <- alpha + beta*t
fit <- lm(pas1.ts ~ t)     #calcula la regresión  lm=modelo lineal
summary(fit)    #slow y el interceptro   y=ax+b
plot(fit)
dplyr::tibble(time = t, value = pas1.ts) %>%
ggplot2::ggplot(ggplot2::aes(x = time, y = value)) +
ggplot2::geom_line() +
ggplot2::geom_abline(intercept = fit$coefficients[1], slope = fit$coefficients[2], col = "red")   #quiero calcular la lina roja con una regresión
# SOI= LA SERIE TEMPORAL
# REC= CANTIDAD DE PECES QUE SE HAN PESCADO
soi.lag6 <- xts::lag.xts(pas1.ts,6)  # desplazar una serie temporal 6 veces, con lo que x1 es igual a y7, x2 igual a y8, x3 igual a y9....
fit <- lm(pas2.ts ~ soi.lag6)    # esta es la relación que hace
summary(fit)
dplyr::tibble(time = zoo::index(pas2.ts),
actual = zoo::coredata(pas2.ts),
estimated = c(rep(0,6),fit$fitted.values)) %>%
tidyr::gather(pas1.ts, Value, -time) %>%
ggplot2::ggplot(ggplot2::aes(x = time, y = Value, col = pas1.ts)) +
ggplot2::geom_line()
plot(fit)
library(reshape2)
meltdf <- melt(df,id="fecha")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Importamos las librerias a utilizar
packages <- c( "magrittr", "jsonlite")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
dataRaw <- fromJSON("mcbackup.json", flatten = TRUE)
dataRaw <- fromJSON("~/home/oscar/Documentos/R/menstrual/mcbackup.json", flatten = TRUE)
dataRaw <- fromJSON("~/home/oscar/Documentos/R/menstrual/mcbackup.json")
dataRaw <- fromJSON("~/home/oscar/Documentos/R/menstrual/mcbackup.json", flatten = TRUE)
#indicamos el directorio de trabajo
setwd("~/Documentos/R/menstrual")
main_sample = jsonlite::stream_in(file("mcbackup.json"))
main_sample = jsonlite::stream_in(file("mcbackup.json"))
i <- sapply(data, is.list) # columns of list class converted into character
data[i] <- lapply(data[i], as.character)
main_sample = jsonlite::stream_in(file("mcbackup.json"))
data = jsonlite::flatten(main_sample) # convert into more nested columns
i <- sapply(data, is.list) # columns of list class converted into character
data[i] <- lapply(data[i], as.character)
write.table(data, file = "data.csv", sep = ",",row.names = FALSE, col.names = TRUE) # convert JSON into CSV format.
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# Limpiamos el entorno de Trabajo
rm(list=ls())
# Limpiamos la consola
cat("\014")
# Comprobamos que está bien establecido el directorio
getwd()
dir()
#indicamos el directorio de trabajo
setwd("~/Documentos/R/menstrual")
# Importamos las librerias a utilizar
packages <- c( "magrittr", "jsonlite")
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
a=lapply(packages, library, character.only=TRUE)
dataRaw <- fromJSON("~/home/oscar/Documentos/R/menstrual/mcbackup.json", flatten = TRUE)
main_sample = jsonlite::stream_in(file("mcbackup.json"))
data = jsonlite::flatten(main_sample) # convert into more nested columns
i <- sapply(data, is.list) # columns of list class converted into character
data[i] <- lapply(data[i], as.character)
write.table(data, file = "data.csv", sep = ",",row.names = FALSE, col.names = TRUE) # convert JSON into CSV format.
library(rjson)
install.packages("rjson", lib="/usr/local/lib/R/site-library")
library(rjson)
json_file <- "mcbackup.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library(rjson)
json_file <- "mcbackup.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
for (x in json_data){print (x)}
library(rjson)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=6, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
df <- do.call(rbind, df)
# Make column names nicer, remove row names
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
library(rjson)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=2, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
df <- do.call(rbind, df)
# Make column names nicer, remove row names
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
View(df)
# Give the input file name to the function.
result <- fromJSON(file = "mcbackup.json")
# Print the result.
print(result)
# Give the input file name to the function.
result <- fromJSON(file = "mcbackup.json")
# Print the result.
print(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
print(json_data_frame)
r_bloggers_data <- fromJSON("mcbackup.json")
r_bloggers_data <- fromJSON("mcbackup.json")
r_bloggers_data <- fromJSON("mcbackup.json")
r_bloggers_data <- fromJSON("~/R/menstrual/mcbackup.json")
r_bloggers_data <- fromJSON("/R/menstrual/mcbackup.json")
r_bloggers_data <- fromJSON("mcbackup.json")
#indicamos el directorio de trabajo
setwd("~/Documentos/R/menstrual")
r_bloggers_data <- fromJSON("mcbackup.json")
myList = rjson::fromJSON(file = "mcbackup.json")
myList
do.call(rbind, lapply(myList, data.frame))
myList = rjson::fromJSON(file = "mcbackup.json")
# myList
do.call(rbind, lapply(myList, data.frame))
library(rjson)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=2, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
df <- do.call(rbind, df)
# Make column names nicer, remove row names
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
View(my.JSON)
rfc <- content(result)
json_file <- sapply(rfc, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
as.data.frame(t(x))
})
# Give the input file name to the function.
result <- fromJSON(file = "mcbackup.json")
# Print the result.
print(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
print(json_data_frame)
rfc <- content(result)
library(jsonlite)
json_file <- sapply(rfc, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
as.data.frame(t(x))
})
rfc <- content(result)
data <- fromJSON("mcbackup.json")
data <- jsonlite::fromJSON("mcbackup.json")
View(data)
data <- jsonlite::fromJSON("mcbackup.json")
data <- bind_rows(data, .id = 'data')
data <- jsonlite::fromJSON("mcbackup.json")
data <- bind_rows(data, .id = 'day')
data <- dplyr::bind_rows(data, .id = 'day')
library(rjson)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=6, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
df <- do.call(rbind, df)
# Make column names nicer, remove row names
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
library(rjson)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
df <- lapply(my.JSON, function(play) # Loop through each "play"
{
# Convert each group to a data frame.
# This assumes you have 6 elements each time
data.frame(matrix(unlist(play), ncol=2, byrow=T))
})
# Now you have a list of data frames, connect them together in
# one single dataframe
df <- do.call(rbind, df)
# Make column names nicer, remove row names
colnames(df) <- names(my.JSON[[1]][[1]])
rownames(df) <- NULL
df
library(httr)
library(jsonlite)
rf <- fromJSON(file="mcbackup.json")
rfc <- content(rf)
library(httr)
library(jsonlite)
rf <- fromJSON(file="mcbackup.json", response.frequencies())
rf <- fromJSON(file="mcbackup.json")
rfc <- content(rf)
formJSON("mcbackup.json") %>%
as.data.frame
fromJSON("mcbackup.json") %>%
as.data.frame
fromJSON(mcbackup.json) %>%
as.data.frame
fromJSON('mcbackup.json') %>%
as.data.frame
# Give the input file name to the function.
result <- fromJSON(file = "mcbackup.json")
# Print the result.
print(result)
# Convert JSON file to a data frame.
json_data_frame <- as.data.frame(result)
print(json_data_frame)
fromJSON(file ='mcbackup.json') %>%
as.data.frame
str(my.json)
# You can pass directly the filename
my.JSON <- fromJSON(file="mcbackup.json")
str(my.json)
str(my.JSON)
json_file <- lapply(my.JSON, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
View(json_file)
do.call("rbind", json_file)
d_raw <- do.call("rbind", json_file)
View(d_raw)
str( jsonlite::fromJSON( file="mcbackup.json" ) )
library(jsonlite)
jsonlite::fromJSON(file="mcbackup.json")
jsonlite::fromJSON("mcbackup.json")
str( jsonlite::fromJSON("mcbackup.json") )
Lines <- readLines("mcbackup.json")
business <- as.data.frame(t(sapply(Lines, fromJSON)))
View(business)
data2 <- as.data.frame(t(d_raw))
View(data2)
mcbackup <- read.csv("~/Documentos/R/menstrual/mcbackup.csv")
View(mcbackup)
mcbackup <- read.csv("~/Documentos/R/menstrual/mcbackup.csv")
View(mcbackup)

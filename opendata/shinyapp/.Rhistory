shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
selectedData <- reactive({
vare[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
runApp()
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)
positions <- c(8:23,25:65,6)
pos <- c(8:23,25:65)
var <- a %>% select(positions)
vare <- a %>% select(pos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)
positions <- c(8:23,25:65,6)
pos <- c(8:23,25:65)
var <- a %>% select(positions)
vare <- a %>% select(pos)
# distinguimos variables "a nivel de intervalo" ("continuas" para ggplot)
nums <- sapply(a, is.numeric)
continuas <- names(a)[nums]
# y variables "categóricas" ("discretas" para ggplot)
cats <- sapply(a, is.character)
categoricas <- names(a)[cats]
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)%>%
filter(MIN_JUGADOS > 2500)
stand <- function(x){ (x-mean(x))/sd(x) }              # function to standardise
standard_a <- sapply(a, "stand")
ndard_a <- a %>% select(pos)%>%
sapply(subset(a, select=toinclude), "stand")
standard_a <- a %>%
sapply(subset(a, select(pos)), "stand")
standard_a <- sapply(subset(a, select=vare), "stand")
list_columns <- gsub("\\.", "_", tolower(names(vare)))
standard_a <- sapply(subset(a, select=list_columns), "stand")
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)%>%
filter(MIN_JUGADOS > 2500)
positions <- c(8:23,25:65,6)
pos <- c(8:23,25:65)
var <- a %>% select(positions)
vare <- a %>% select(pos)
list_columns <- gsub("\\.", "_", tolower(names(vare)))
standard_a <- sapply(subset(a, select=list_columns), "stand")
stand <- function(x){ (x-mean(x))/sd(x) }              # function to standardise
toinclude <- c("PART_JUGADOS","MIN_JUGADOS", "PASES", "DUELOS", "INTERVENCIONES", "RECUPERACIONES", "PART_TITULAR" ) # selected variables
stand_a <- sapply(subset(a, select=toinclude), "stand")       # apply fun
rownames(stand_a) <- rownames(a)
View(stand_a)
runApp()
a_standarize[] <- lapply(a, function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
a[] <- lapply(a, function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
runApp()
View(a)
#apply Min-Max normalization to first four columns in iris dataset
a_norm <- as.data.frame(lapply(a, min_max_norm))
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
a_norm <- as.data.frame(lapply(iris[1:4], min_max_norm))
View(a_norm)
#apply Min-Max normalization to first four columns in iris dataset
a_norm <- as.data.frame(lapply(a, min_max_norm))
apply Min-Max normalization to first four columns in iris dataset
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
View(a_norm)
tt <- melt(data.frame(a_norm[which(a$NOMBRE %in% c(JUGADOR_A, JUGADOR_B)),c(1:45)]), id.vars = c('NOMBRE'))
runApp()
db_a <- cbind(a[1:7],a_norm)
db_a <- cbind(a(1:7),a_norm)
b <- a[1:7]
db_a <- cbind(b,a_norm)
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)%>%
filter(MIN_JUGADOS > 2500)
#apply Min-Max normalization to first four columns in iris dataset
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
b <- a[1:7]
View(a_norm)
#apply Min-Max normalization
a_norm <- lapply(a[8:23,25:65], min_max_norm)
View(a_norm)
)
as.data.frame(
#apply Min-Max normalization
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
a <- read.csv('../input/datos_completos_limpios_1.csv', header = TRUE)%>%
filter(MIN_JUGADOS > 2500)
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
ply Min-Max normalization
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
#apply Min-Max normalization
a_norm <- as.data.frame(apply(a[8:23,25:65], min_max_norm))
#apply Min-Max normalization
a_norm <- as.data.frame(lapply(a[8:23,25:65], min_max_norm))
rld <- rlog(a)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("shinydashboard", "shinymaterial"))
runApp()
runApp()
shiny::runApp()
runApp()
ui <- dashboardPage(skin = "blue",
dashboardHeader(title = "OpenData 2020"),
dashboardSidebar(sidebarMenuOutput("Semi_collapsible_sidebar")
),
dashboardBody(
tags$head(tags$style(HTML(
'.myClass {
font-size: 20px;
line-height: 50px;
text-align: left;
font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
padding: 0 12px;
overflow: hidden;
color: white;
}
'))),
tabItems(
tabItem(tabName = "dashboard",
fluidPage(
tags$head(tags$style(
HTML('body, label, input, button, select {
background-color: #fafafa;
font-family: monospace; }')
)),
fluidRow(
column(2),
column(4,
align = 'center',
selectInput(inputId = "p1",
label = "",
choices = unique(a$BARRIO),
selected = 'AIETE')),
column(4,
align = 'center',
selectInput(inputId = "p2",
label = "",
choices = unique(a$BARRIO),
selected = 'ALTZA')),
column(2)
),
fluidRow(
column(3),
column(6,
style = "font-size: 4px;
padding: 0px 0px; margin-top:-14em;
margin-left:4em;",
plotOutput(outputId = "compare")),
column(3)
),
fluidRow(
column(3),
column(3,
align = 'center',
style = "margin-top:8em;",
tableOutput("profile1")),
column(3,
align = 'center',
style = "margin-top:8em;",
tableOutput("profile2")),
column(3)
)
)
),
tabItem(tabName = "means",
fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('xcol', 'X Variable', names(vare))),
column(4, selectInput('ycol', 'Y Variable', names(vare),
selected=names(vare)[[2]]))#,
#column(4, numericInput('clusters', 'Cluster count', 4,
#min = 1, max = 9))
),
fluidRow(
plotOutput('kmeans', height = "400px")
),
)
),
tabItem(tabName = "presentation",
img(src = "udala.jpeg", height = 100, width = 100, align = 'center'),
img(src = "w79-logo_opendata.gif",  align = 'center'),
h1("Concursos Open Data 2020", align = "center"),
h2("Creado por Oscar Rojo", align = "center"),
p(""),
align = 'center',
material_button(
input_id = "button1",
label = "https://www.linkedin.com/in/oscar-rojo-martin/",
color = "blue"
),
p(""),
p(""),
align = 'left',
p("El objetivo de este proyecto es poder analizar los datos obtenidos que suministra el Ayuntamiento de
Donostia a través de su sección web DATOS ABIERTOS"),
p("Se ha utilizado como lenguaje R, como IDE, RSTUDIO y el SO es UBUNTU 20.04"),
p(""),
p("Este primer apartado describe el proyecto"),
p("El segundo muestra en una tabla los datos con los que se han trabajado"),
p("El tercero se utiliza un modelo de Machine Learning para obte similitudes de barrios por diferentes atributos"),
p("El cuarto es otro modelo de Machine Learning - K-means para obtener similitudes entre barrios"),
p("El quinto es un scatterplot con selección de variables categóricas y númericas"),
p(""),
align = 'right',
h4("Fuente de datos"),
p("demografia <- (https://www.donostia.eus/datosabiertos/recursos/demografia-origen/demografianacionalidadbarriockan.csv)"),
p("vehiculos <- (https://www.donostia.eus/datosabiertos/recursos/vehiculos_barrio/vehiculosbarrio.csv)"),
p("tasas <- https://www.donostia.eus/datosabiertos/recursos/tasas_tipo/pfitasastipobarriockan.csv)"),
p("recibos <- (https://www.donostia.eus/datosabiertos/recursos/impuestos_tipo/pfiimpuestostipobarriockan.csv)"),
p("habitantes <- (https://www.donostia.eus/datosabiertos/recursos/habitantes-barrios/habitantesporbarrio.csv)"),
p("renta <- (https://www.donostia.eus/datosabiertos/recursos/eustat_renta/eustatrentabarrio.csv)"),
p("indices_demografia <- (https://www.donostia.eus/datosabiertos/recursos/demografia-indices/demografiaindicesbarriockan.csv)"),
p("paro <- (https://www.donostia.eus/datosabiertos/recursos/eustat_paro/eustatparobarrio.csv, sep=,)"),
p("extranjeros <- (https://www.donostia.eus/datosabiertos/recursos/demografia-extranjeros/demografiaextranjerosbarriockan.csv)"),
p("estudios <- (https://www.donostia.eus/datosabiertos/recursos/demografia-nivelestudios/demografianivelestudiosbarriockan.csv)"),
p("")
),
tabItem(tabName = "cluster",# Sidebar with a slider input for number of observations and checkboxes
sidebarPanel(
sliderInput("clusters", "Number of clusters:",
min = 2,        # 1 cluster is pointless
max = 10,       # too many is too crowded
value = 4) ,    # sensible start
helpText("Nota: Esta Shiny App ejecuta la agrupación jerárquica de Ward",
"en el conjunto de datos, utilizando una métrica de distancia" ,
"euclidiana y versiones estandarizadas de las variables" ,
"(es decir, con media=0 sd=1) que seleccione en las casillas",
"de verificación de abajo.",
"Puedes elegir el número de clusters con el desplazador de arriba.") ,
checkboxInput("UNIVERSITARIOS_._xBarrio", "POBLACION",     TRUE) , # as in regression project
checkboxInput("TASA_PARO", "TASA_PARO",      FALSE) ,
checkboxInput("RENTA_FAMILIA", "RENTA_FAMILIA",    FALSE) ,
checkboxInput("ingresoIBI_X_PERS","ingresoIBI_X_PERS",    FALSE) ,
checkboxInput("ingresoAGUA_X_PERS", "ingresoAGUA_X_PERS",   TRUE) ,
checkboxInput("COCHES.MOTOS","COCHES.MOTOS",  FALSE),
checkboxInput('TASA_NACIMIENTOS','TASA_NACIMIENTOS', FALSE)
#input$RENTA_FAMILIA, input$UNIVERSITARIOS_._xBarrio, input$ingresoIBI_X_PERS, input$COCHES.MOTOS, input$ingresoAGUA_X_PERS, input$TASA_NACIMIENTOS
),
# Show a plot of the generated cluster dendrogram
mainPanel("Cluster Dendograma",
p("En este panel podemos generar agrupaciones de Barrios por similitud."),
p('Los barrios son:'),
p('[1]   "AIETE"               [2]   "ALTZA"              [3]   "AMARA BERRI"'),
p('[4]   "ANTIGUO"             [5]   "AÑORGA"             [6]   "ATEGORRIETA- ULIA"'),
p('[7]   "CENTRO"              [8]   "EGIA"               [9]   "GROS"'),
p('[10]  "IBAETA"              [11]  "IGELDO"             [12]  "INTXAURRONDO"'),
p('[13]  "LANDARBASO"          [14]  "LOIOLA"             [15]  "MARTUTENE"'),
p('[16]  "MIRACRUZ- BIDEBIETA" [17]  "MIRAMON - ZORROAGA" [18]  "ZUBIETA"'),
p(''),
plotOutput("distPlot", width = "100%")
),
),
tabItem(tabName = "charts",
sidebarPanel(
selectInput('x', 'Elige variable para eje X', continuas, continuas[[1]]),
selectInput('y', 'Elige variable para eje Y', continuas, continuas[[2]]),
selectInput('color', 'CATEGORIAS', c('None', 'BARRIO', 'SITUACION_RENTA' ,'MOTORIZACION', 'UNIVERSITARIOS', 'MUJERES', 'HOMBRE', 'EXTRANJEROS',
'EXTR_._._s.total',
'SIN_ESTUDIOS_PREES_SECUND',
'SIN_ESTUDIOS_PREES_SECUND_._xBarrio',
'SIN_ESTUDIOS_PREES_SECUND_._s.total',
'ED.SECUNDARIA',
'ED.SECUNDARIA_._xBarrio',
'ED.SECUNDARIA_._s.total',
'UNIVERSITARIOS',
'UNIVERSITARIOS_._xBarrio',
'UNIVERSITARIOS_._s.total',
'PROFESIONALES',
'PROFESIONALES_._xBarrio',
'PROFESIONALES_._s.total',
'TASA_PARO',
'TASA_NACIMIENTOS',
'TASA_ENVEJECIMIENTO',
'SITUACION_RENTA',
'RENTA_FAMILIA',
'AGUA_PERSONA',
'ingresoIBI_X_PERS',
'ingresoIAE_X_PERS',
'VEHICxPERSONA',
'N_VEHICULOS',
'COCHES.MOTOS')),
checkboxInput('lm', 'Línea de Regresión'),
checkboxInput('smooth', 'Suavizado LOESS'),
selectInput('facet_row', 'Elige variable para facetas por filas', c(None='.', categoricas)),
downloadButton("descarga", "IMPRIMIR")
),
mainPanel(
plotOutput('charts',
height=650)
)
),
tabItem(tabName = "data",
fluidPage(
fluidRow(
column(12,
DTOutput('table')
)
)
)
),
tabItem(tabName = "link",
fluidPage(
uiOutput("link"),
h2("http://www.oscarrojo.es/")
)
),
tabItem(tabName = "link1",
fluidPage(
uiOutput("link1"),
h2("https://www.linkedin.com/in/oscar-rojo-martin/")
)
),
tabItem(tabName = "link2",
fluidPage(
uiOutput("link2"),
h2("https://www.medium.com/@zumaia/")
)
)
),
tags$script(HTML('
$(document).ready(function() {
$("header").find("nav").append(\'<span class="myClass"> OpenData //  Datos públicos del Ayuntamiento de Donostia-San Sebastian </span>\');
})
'))
shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
library(dplyr)
library(magrittr)
library(shinydashboard)
library(DT)
library(ggplot2)
library(reshape2)
library(shinymaterial)
library(shinyjs)
a <- read.csv('./www/total.csv', header = TRUE)
a <- select(a, -X )
library(shiny)
library(dplyr)
library(magrittr)
library(shinydashboard)
library(DT)
library(ggplot2)
library(reshape2)
library(shinymaterial)
library(shinyjs)
a <- read.csv('./www/total.csv', header = TRUE)
a <- select(a, -X )
runApp()
runApp()
runApp()
View(a)
runApp()
shiny::runApp()
